---
title: "Lab 3"
author: "Kai, Eva, Chloe"
format: 
  html: 
    self-contained: true
    code-tools: true
    code-fold: true
editor: visual
execute: 
  echo: true
  include: true
  message: false
  warning: false
---

```{r}
# libraries
library(here)
library(tidyverse)
library(httr)
library(jsonlite)
library(leaflet)
```

**Create one Quarto file for all of Lab 4.**

Make sure your final file is carefully formatted, so that each analysis is clear and concise. Be sure your knitted .html file shows all your source code, including your function definitions.

## The Open-Notify API

One of the Open-Notify APIs provides predictions of pass times for a given location when given the corresponding latitude, longitude, and altitude are given:

[Pass Times API](https://g7vrd.co.uk/public-satellite-pass-rest-api)

### Pass Times for U.S. State Captials

You can find the latitudes and longitudes for the U.S. state capitals at [this site](https://people.sc.fsu.edu/~jburkardt/datasets/states/states.html).

1.  Use the API to get the next 3 predicted pass times for all of the U.S. state capitals. Organize all of this information into a nice data frame (or data frame-like object) that will be easy to use for mapping.

```{r}
# Loading in capital dataset

capital <- read.table("https://people.sc.fsu.edu/~jburkardt/datasets/states/state_capitals_ll.txt")
capital <- capital |>
  rename(State = V1,
         Latitude = V2,
         Longitude = V3)
```

```{r}
# Function to get pass times for a given location
pass_times <- function(latitude, longitude) {
  url <- paste0("https://api.g7vrd.co.uk/v1/satellite-passes/25544/",
                latitude, "/", longitude, ".json")
  pass <- GET(url)
  data <- fromJSON(rawToChar(pass$content))
  if (length(data$pass) == 0) {
     return(NULL)
   }
  dataframe <- data |>
    data.frame(data) |>
    slice_head(n = 3)
  dataframe

}
```

```{r}
# Source for bind_rows(): https://dplyr.tidyverse.org/reference/bind_rows.html
map_passes <- map2(capital$Latitude, capital$Longitude, pass_times) |>
  bind_rows()
```

### Mapping the Data

1.  Map the U.S. state capitals using `leaflet`

```{r}
# Map with U.S. capitals
leaflet() |>
  addProviderTiles(providers$Stadia.StamenTerrain) |>
  addCircleMarkers(data = map_passes,
                   lat = ~lat,
                   lng = ~lon,
                   radius = 4,
                   color = "darkgreen") |>
  setView(lng = -100, lat = 40, zoom = 4)
```

2.  Find an image of your choosing to use as the marker icon, that's relevant for these data.

```{r}
# Source for rocket image: https://pngtree.com/element/down?id=NTUzMTc4Nw==&type=1&time=1714350436&token=YmIyZDI1MzQwMzU0NTdkYjJmNDM5NTcxNDEwZDhjYjY=&t=0
# Source for adding marker icon: https://rdrr.io/cran/leaflet/man/icons.html

# Map with rocket marker icon
leaflet() |>
  addProviderTiles(providers$Stadia.StamenTerrain) |>
  addMarkers(data = map_passes,
                   lat = ~lat,
                   lng = ~lon,
             icon = ~ icons(iconUrl = "Rocket.png", 
                         iconWidth = 40, 
                         iconHeight = 40)) |>
  setView(lng = -100, 
          lat = 40, 
          zoom = 4)
```

3.  The hover-over information for each marker should include the name of the state capital and the soonest predicted pass time. The click information should include the name of the state capital and all three predicted pass times. Make sure these times are in an easy-to-read format.

```{r}
# Source for capital data: https://www.thespreadsheetguru.com/list-united-states-capitals-abbreviations/
# Source for needing "\\" with a "." to separate by it: https://stackoverflow.com/questions/26665100/how-to-use-the-strsplit-function-with-a-period
# Source for collapse in paste: https://www.digitalocean.com/community/tutorials/paste-in-r

# Reading in dataset with capital names
city <- read.csv(here("Data", "State Capitals.csv"))

# Joining together datasets
map_data <- left_join(map_passes, capital, by = c("lon" = "Longitude"))
map_data <- left_join(map_data, city, by = "State")

# Making popup for click info column
map_data <- map_data |>
  # Separating date and time pieces of the passes.start
  separate(passes.start, 
           into = c("Date", "Time.unedit"), 
           sep = "T", remove = FALSE) |>
  # Separating the hour, minutes, and seconds of the time from the milliseconds
  separate(Time.unedit, 
           into = c("Time", "Rest"), 
           sep = "\\.", remove = FALSE) |>
  # Pasting together the cleaned date and time pieces
  mutate(Date.Time = paste(Date, Time)) |>
  # Pasting together the pass times by state
  group_by(State) |>
  mutate(state.date.times = paste(Date.Time, collapse = ", "),
  # Making the click part of the popup
         click = paste("State Capital:", State.Capital,
                        "<br>",
                       "Predicted Passes:", state.date.times)) |>
  # Separating the first pass time for each state
  separate(state.date.times, 
           into = c("First.Pass", "Rest Passes"), 
           sep = ",", remove = FALSE) |>
  # Making the hover part of the popup
  mutate(hover = paste("State Capital:", State.Capital, 
                       "<br>",
                       "Next Pass:", First.Pass))
```

```{r}
# Map with a click popup and hover popup
leaflet() |>
  addProviderTiles(providers$Stadia.StamenTerrain) |>
  addMarkers(data = map_data,
                   lat = ~lat,
                   lng = ~lon,
             icon = ~icons(iconUrl = "Rocket.png", 
                         iconWidth = 40, 
                         iconHeight = 40),
             popup = ~click,
             label = ~hover) |>
  setView(lng = -100, 
          lat = 40, 
          zoom = 4)
```

### Drawing the Route of the ISS

Check out this video for [adding polylines](https://www.youtube.com/watch?v=iKESL0Iwmmw) to a `leaflet` map.

1.  Overlay lines on your map that connect the U.S. state capitals in order of pass times (essentially east to west) so that we can see the expected pass order.
